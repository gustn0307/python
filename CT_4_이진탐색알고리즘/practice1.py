## 떡볶이 떡 만들기
## 떡볶이 떡의 길이는 일정하지 않고 한 봉지 안에 들어가는 떡의 총 길이는 절단기로 잘라서 맞춰줌
## 절단기에 높이(H)를 지정하면 줄지어진 떡을 한 번에 절단함, 높이가 H보다 긴 떡은 H 위의 부분이 잘릴 것이고, 낮은 떡은 잘리지 않음
## 예를 들어 19, 14, 10, 17 cm인 떡이 나란히 있고 절단기 높이를 15cm로 지정하면 자른 뒤 떡의 높이는 15, 14, 10, 15cm가 됨
## 잘린 떡의 길이는 각각 4, 0, 0, 2cm임, 손님은 6cm 만큼의 길이를 가져감
## 손님이 왔을 때 요청한 총 길이가 M일 때 적어도 M만큼의 떡을 얻기 위해 절단기에 설정할 수 있는 높이의 최댓값을 구하는 프로그램 작성

## 내 답안 
# => 떡의 개수(N)와 잘린 떡의 길이의 합(M)은 범위가 있지만 떡의 개별 높이는 주어진 범위가 없으므로 하나씩 다 찾으면 존나 오래걸림
# 그리고 적어도 M 만큼인데 딱 M 만큼만으로 풀이했음
# n, m = map(int, input().split())
# rice_cake = list(map(int, input().split()))

# rice_cake.sort()
# h=0
# bigh=0
# cnt=0
# result=0
# while h<=1000000000: # h는 10억보다 작거나 같은 양의 정수 또는 0 
#     result=0
#     for i in range(n):
#         if rice_cake[i] - h > 0:
#             result+=(rice_cake[i] - h)
#         else:
#             continue

#     if result == m : # 요청한 떡의 길이가 나오면 최대 높이(bigh)에 현재 높이 값 넣기
#         bigh=h

#     if result == 0: # 요청한 떡의 길이가 안나오면 break
#         break
#     h+=1

# print(bigh)

## 동빈나 답안
## 적절한 높이를 찾을 때까지 이진 탐색을 수행하여 높이 H를 반복해서 조정하면 됨
## 현재 이 높이로 자르면 조건을 만족할 수 있는가?를 확인한 뒤에 조건의 만족 여부('예' 혹은 '아니오')에 따라서 탐색 범위를 좁혀 해결
## 절단기의 높이는 0부터 10억까지의 정수 중 하나, 이렇게 큰 탐색 범위를 보면 가장 먼저 이진 탐색을 떠올려야 함
## 가장 긴 떡의 길이를 끝점으로 설정해서 이진 탐색 알고리즘 사용(잘린 떡이 있어야 하므로 높이는 가장 긴 떡의 길이보다 작다)
## 중간점의 값은 시간이 지날수로 최적화된 값이 되기 때문에 과정을 반복하면서 얻을 수 있는 떡의 길이 합이 
## 필요한 떡의 길이보다 크거나 같을 때마다 중간점의 값을 기록하면 됨


n, m = list(map(int, input().split())) # 떡의 개수(N)와 요청한 떡의 길이(M)을 입력
array = list(map(int, input().split())) # 각 떡의 개별 높이 정보를 입력

# 이진 탐색을 위한 시작점과 끝점 설정
start = 0
end = max(array)

result=0
# 이진 탐색 수행(반복적)
while(start <= end):
    total = 0
    mid = (start + end) // 2

    for x in array:
        # 잘랐을 때의 떡의 양 계산
        if x > mid:
            total += x - mid
    
    if total < m: # 떡의 양이 부족한 경우 더 많이 자르기 (왼쪽 부분 탐색)
        end = mid -1
    else: # 떡의 양이 충분한 경우 덜 자르기 (오른쪽 부분 탐색)
        result = mid # 최대한 덜 잘랐을 때가 정답이므로 여기에서 result에 기록
        start = mid + 1

# 정답 출력
print(result)







