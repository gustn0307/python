## 정렬이란 데이터를 특정한 기준에 따라 순서대로 나열하는 것
## 일반적으로 문제 상황에 따라서 적절한 정렬 알고리즘이 공식처럼 사용됨
## 대부분의 프로그래밍 언어에서 지원하는 표준 정렬 라이브러리는 최악의 경우에도 O(NlogN)을 보장하도록 설계되어 있음

# 정렬 알고리즘     평균 시간 복잡도    공간 복잡도             특징
# 선택 정렬         O(N^2)                 O(N)         아이디어가 매우 간단
# 삽입 정렬         O(N^2)                 O(N)         데이터가 거의 정렬 되어 있을 때는 가장 빠름
# 퀵 정렬           O(NlogN)               O(N)         대부분의 경우에 가장 적합하며, 충분히 빠름
# 계수 정렬         O(N + K)               O(N + K)     데이터의 크기가 한정되어 있는 경우에만 사용이 가능하지만 매우 빠르게 동작

## 선택 정렬: 처리되지 않은 데이터 중에서 가장 작은 데이터를 선택해 맨 앞에 있는 데이터와 바꾸는 것을 반복
array = [7, 5, 9, 0, 3, 1, 6, 2, 4, 8]

for i in range(len(array)):
    min_index = i  # 가장 작은 원소의 인덱스
    for j in range(i+1, len(array)): # 가장 작은 원소 찾기
        if array[min_index] > array[j]:
            min_index = j
    array[i], array[min_index] = array[min_index], array[i]  # 스왑

print(array)

## 선택 정렬은 N번 만큼 가장 작은 수를 찾아서 맨 앞으로 보내야 함
## 구현 방식에 따라서 사소한 오차는 있을 수 있지만, 전체 연산 횟수는 다음과 같음
## N + (N-1) + (N-2) + ... + 2  => (N^2 + N - 2) / 2  => O(N^2)