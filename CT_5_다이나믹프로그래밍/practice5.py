## 병사 배치하기
# N명의 병사가 무작위로 나열되어 있음 각 병사는 특정 수치의 전투력을 보유
# 병사를 배치할 때는 전투력이 높은 병사가 앞쪽에 오도록 내림차순으로 배치하고자 함
# 또한 배치 과정에서는 특정한 위치에 있는 병사를 열외시키는 방법을 이용하고 그러면서도 남아 있는 병사의 수가 최대가 되도록 함
# 남아있는 병사의 수가 최대가 되도록 하기위해 열외시켜야 하는 병사의 수를 출력하는 프로그램 작성

## 내 답안


## 동빈나 답안
# 가장 긴 증가하는 부분 수열(Longest Increasing Subsequence, LIS)로 알려진 전형적인 다이나믹 프로그래밍 문제의 아이디어와 같음
# ex) array = {4,2,5,8,4,11,15} 가 있을 때, 이 수열의 가장 긴 증가하는 부분 수열은 {4,5,8,11,15} 임
# 본 문제는 가장 긴 감소하는 수열을 찾는 문제로 치환할 수 있으므로, LIS 알고리즘을 조금 수정하여 적용하여 정답 도출할 수 있음

# LIS 알고리즘 => D[i] = array[i]를 마지막 원소로 가지는 부분 수열의 최대 길이 점화식
# => 모든 0 <= j < i 에 대하여, D[i] = max[D[i], D[j] + 1] if array[j] < array[i]
# 최악의 경우 시간 복잡도 O(N^2)

# 입력 받은 병사 정보의 순서를 뒤집고 LIS 알고리즘을 수행하여 정답을 도출

n = int(input())
array = list(map(int, input().split()))

array.reverse() # 순서를 뒤집어 '최장 증가 부분 수열' 문제로 변환

dp = [1] * n # 다이나믹 프로그래밍을 위한 1차원 DP 테이블 초기화

# LIS 알고리즘 수행
for i in range(1, n):
    for j in range(0, i):
        if array[j] < array[i]:
            dp[i] = max(dp[i], dp[j] + 1)

print(n - max(dp)) # 열외해야 하는 병사의 최소 수를 출력