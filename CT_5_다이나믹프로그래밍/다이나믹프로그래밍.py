# 다이나믹 프로그래밍: 메모리를 적절히 사용하여 수행시간 효율성을 비약적으로 향상시키는 방법
# 이미 계산된 결과(작은 문제)는 별도의 메모리 영역에 저장하여 다시 계산하지 않도록 함
# 다이나믹 프로그래밍의 구현은 일반적으로 두 가지 방식(탑다운과 바텀업)으로 구성됨

# 다이나믹 프로그래밍은 동적 계획법이라고도 부름
# 일반적인 프로그래밍 분야에서의 동적(Dynamic)이란 
# 1. 자료구조에서 동적 할당(Dynamic Allocation)은 프로그램이 실행되는 도중에 실행에 필요한 메모리를 할당하는 기법을 의미
# 2. 반면에 다이나믹 프로그래밍에서 다이나믹은 별다른 의미없이 사용된 단어임

# 다이나믹 프로그래밍은 문제가 다음의 조건을 만족할 때 사용가능
# 1. 최적 부분 구조(Optimal Substructure): 큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아서 큰 문제를 해결 가능
# 2. 중복되는 부분 문제(overlapping Subproblem): 동일한 작은 문제를 반복적으로 해결해야 함

## 피보나치 수열 => 1, 1, 2, 3, 5, 8, 13, 21, 34, ... => 이전 두 개 합쳐서 세 번째 항의 수가 됨
# 다이나믹 프로그래밍으로 효과적으로 계산할 수 있음

#피보나치 함수(Fibonacci Function)을 재귀함수로 구현
def fibo(x):
    if x==1 or x==2: # 재귀함수 종료 조건
        return 1
    return fibo(x-1) + fibo(x-2)

print(fibo(4))

# 단순 재귀 함수로 피보나치 수열을 해결하면 지수 시간 복잡도 O(2^N)를 가지게 됨, f(6)을 구할 때 f(2)는 5번 호출됨(중복되는 부분 문제)
# 빅오 표기법을 기준으로 f(30)을 계산하기 위해 약 10억 가량의 연산을 수행해야 함

# 피보나치 수열은 다이나믹 프로그래밍의 2가지 사용 조건(최적 부분 구조, 중복되는 부분 문제)을 모두 만족

# 메모이케이션(Memoization): 다이나믹 프로그래밍을 구현하는 방법 중 하나, 탑다운(하향식) 방식
# 한 번 계산한 결과를 메모리 공간에 메모하는 기법
# 같은 문제를 다시 호출하면 메모했던 결과를 그대로 가져옴, 값을 기록해 놓는다는 점에서 캐싱(Caching)이라고도 함

# 탑다운(메모이제이션) 방식은 하향식이라고도 하며 바텀업 방식은 상향식이라고도 부름
# 다이나믹 프로그래밍(DP)의 전형적인 형태는 바텀업 방식, 결과 저장용 리스트는 DP 테이블이라고 부름
# 엄밀히 말하면 메모이제이션은 이전에 계산된 결과를 일시적으로 기록해 놓는 넓은 개념을 의미함
# 따라서 메모이제이션은 DP에 국한된 개념은 아니고 한 번 계산된 결과를 담아 놓기만 하고 DP를 위해 활용하지 않을 수도 있음

# 피보나치 함수를 탑다운 다이나믹 프로그래밍으로 구현
d = [0] * 100 # 한 번 계산된 결과를 메모이제이션 하기 위한 리스트 초기화

# 피보나치 함수를 재귀함수로 구현(탑다운 다이나믹 프로그래밍)
def fibo(x):
    if x==1 or x==2: # 재귀함수 종료 조건(1 혹은 2일 때 1을 반환)
        return 1
    if d[x] != 0: # 이미 계산한 적 있는 문제라면 그대로 반환(계산했던 값 활용)
        return d[x]
    d[x] = fibo(x-1) + fibo(x-2) # 아직 계산하지 않은 문제라면 점화식에 따라서 피보나치 결과 반환
    return d[x]

print(fibo(99))

# 피보나치 함수를 바텀업 다이나믹 프로그래밍으로 구현
d = [0] * 100 # 한 번 계산된 결과를 저장하기 위한 DP 테이블 초기화

# 첫 번째 피보나치 수와 두 번째 피보나치 수는 1
d[1]=1
d[2]=1
n=99

# 피보나치 함수 반복문으로 구현(바텀업 다이나믹 프로그래밍)
for i in range(3, n+1):
    d[i] = d[i - 1] + d[i - 2] # 먼저 해결해 놓았던 작은 문제들을 조합해 큰 문제들을 해결

print(d[n])

# 메모이제이션을 이용하는 경우 피보나치 수열 함수의 시간 복잡도는 O(N)입니다

# 다이나믹 프로그래밍 VS 분할 정복
# 다이나믹 프로그래밍과 분할 정복은 모두 최적 부분 구조를 가질 때 사용할 수 있음 
# - 큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아서 큰 문제를 해결할 수 있는 상황

# 다이나믹 프로그래밍과 분할 정복의 차이점은 부분 문제의 중복임
# - 다이나믹 프로그래밍 문제에서는 각 부분 문제들이 서로 영향을 미치며 부분 문제가 중복됨
# - 분할 정복 문제에서는 동일한 부분 문제가 반복적으로 계산되지 않음

# 다이나믹 프로그래밍 문제에 접근하는 법
# 주어진 문제가 다이나믹 프로그래밍 유형임을 파악하는 것이 중요
# 가장 먼저 그리디, 구현, 완전 탐색 등으로 문제를 해결할 수 있는지 검토하고 풀이 방법이 떠오르지 않으면 다이나믹 프로그래밍을 고려
# 일단 재귀 함수로 비효율적인 완전 탐색 프로그램을 작성한 뒤에 (탑다운) 작은 문제에서 구한 답이 큰 문제에서 그대로 사용될 수 있으면
# 코드를 개선하는 방법을 사용할 수 있음
# 일반적인 코딩 테스트 수준에서는 기본 유형의 다이나믹 프로그래밍 문제가 출제되는 경우가 많음




